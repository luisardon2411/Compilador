/* The following code was generated by JFlex 1.4.3 on 16/04/23, 23:05 */

package codigo;

import static codigo.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/04/23, 23:05 from the specification file
 * <tt>C:/Users/luise.ardon/Documents/NetBeansProjects/Compilador/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\6\2\0\1\6\22\0\1\6\4\0\1\3\2\0"+
    "\2\5\2\3\1\4\1\3\1\37\1\3\12\2\1\0\1\4\1\0"+
    "\1\3\3\0\32\1\1\35\1\0\1\36\1\0\1\15\1\0\1\22"+
    "\1\34\1\21\1\23\1\16\1\14\1\17\1\30\1\13\2\1\1\32"+
    "\1\25\1\11\1\10\1\27\1\31\1\26\1\12\1\24\1\20\2\1"+
    "\1\33\1\7\1\1\1\5\1\0\1\5\103\0\1\1\7\0\1\1"+
    "\3\0\1\1\3\0\1\1\1\0\1\1\6\0\1\1\6\0\1\1"+
    "\7\0\1\1\3\0\1\1\3\0\1\1\1\0\1\1\6\0\1\1"+
    "\uff05\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\14\2\2\0\1\12\1\13\17\2\1\0"+
    "\1\3\22\2\1\14\1\15\5\2\1\16\4\2\1\17"+
    "\1\2\1\20\3\2\1\21\1\22\11\2\1\23\1\2"+
    "\1\14\4\2\1\24\6\2\1\25\7\2\1\26\5\2"+
    "\1\27\2\2\1\30\1\2\1\31\5\2\1\32\1\2"+
    "\1\33\1\34\1\35\2\2\1\36\4\2\1\37\4\2"+
    "\1\40\3\2\1\41\3\2\1\42\3\2\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\40\0\40\0\40\0\200"+
    "\0\100\0\100\0\240\0\300\0\340\0\u0100\0\u0120\0\u0140"+
    "\0\u0160\0\u0180\0\u01a0\0\u01c0\0\u01e0\0\u0200\0\u0220\0\u0240"+
    "\0\100\0\u0260\0\u0280\0\u02a0\0\u02c0\0\u02e0\0\u0300\0\u0320"+
    "\0\u0340\0\u0360\0\u0380\0\u03a0\0\u03c0\0\u03e0\0\u0400\0\u0420"+
    "\0\u0440\0\u0460\0\u0240\0\u0480\0\u04a0\0\u04c0\0\u04e0\0\u0500"+
    "\0\u0520\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0\0\u05e0\0\u0600"+
    "\0\u0620\0\u0640\0\u0660\0\u0680\0\u06a0\0\40\0\100\0\u06c0"+
    "\0\u06e0\0\u0700\0\u0720\0\u0740\0\100\0\u0760\0\u0780\0\u07a0"+
    "\0\u07c0\0\u07e0\0\u0800\0\100\0\u0820\0\u0840\0\u0860\0\100"+
    "\0\100\0\u0880\0\u08a0\0\u08c0\0\u08e0\0\u0900\0\u0920\0\u0940"+
    "\0\u0960\0\u0980\0\u07e0\0\u09a0\0\u09c0\0\u09e0\0\u0a00\0\u0a20"+
    "\0\u0a40\0\100\0\u0a60\0\u0a80\0\u0aa0\0\u0ac0\0\u0ae0\0\u0b00"+
    "\0\u07e0\0\u0b20\0\u0b40\0\u0b60\0\u0b80\0\u0ba0\0\u0bc0\0\u0be0"+
    "\0\100\0\u0c00\0\u0c20\0\u0c40\0\u0c60\0\u0c80\0\100\0\u0ca0"+
    "\0\u0cc0\0\100\0\u0ce0\0\100\0\u0d00\0\u0d20\0\u0d40\0\u0d60"+
    "\0\u0d80\0\100\0\u0da0\0\100\0\u07e0\0\100\0\u0dc0\0\u0de0"+
    "\0\100\0\u0e00\0\u0e20\0\u0e40\0\u0e60\0\100\0\u0e80\0\u0ea0"+
    "\0\u0ec0\0\u0ee0\0\100\0\u0f00\0\u0f20\0\u0f40\0\100\0\u0f60"+
    "\0\u0f80\0\u0fa0\0\100\0\u0fc0\0\u0fe0\0\u1000\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\3\1\15\1\3\1\16\2\3"+
    "\1\17\1\3\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\3\1\26\2\3\2\7\1\6\41\0\2\3\4\0"+
    "\26\3\1\27\4\0\1\4\34\0\1\30\6\0\1\10"+
    "\32\0\2\3\4\0\1\3\1\31\24\3\1\27\3\0"+
    "\2\3\4\0\4\3\1\32\2\3\1\33\16\3\1\27"+
    "\3\0\2\3\4\0\4\3\1\34\4\3\1\35\14\3"+
    "\1\27\3\0\2\3\4\0\2\3\1\36\1\37\22\3"+
    "\1\27\3\0\2\3\4\0\13\3\1\40\12\3\1\27"+
    "\3\0\2\3\4\0\7\3\1\41\16\3\1\27\3\0"+
    "\2\3\4\0\7\3\1\42\16\3\1\27\3\0\2\3"+
    "\4\0\4\3\1\43\21\3\1\27\3\0\2\3\4\0"+
    "\7\3\1\44\16\3\1\27\3\0\2\3\4\0\13\3"+
    "\1\45\3\3\1\46\6\3\1\27\3\0\2\3\4\0"+
    "\13\3\1\47\12\3\1\27\3\0\2\3\4\0\1\3"+
    "\1\50\5\3\1\51\16\3\1\27\4\0\1\52\37\0"+
    "\1\53\36\0\2\3\4\0\2\3\1\54\23\3\1\27"+
    "\3\0\2\3\4\0\10\3\1\55\15\3\1\27\3\0"+
    "\2\3\4\0\2\3\1\56\23\3\1\27\3\0\2\3"+
    "\4\0\2\3\1\57\23\3\1\27\3\0\2\3\4\0"+
    "\15\3\1\60\10\3\1\27\3\0\2\3\4\0\12\3"+
    "\1\61\13\3\1\27\3\0\2\3\4\0\3\3\1\62"+
    "\13\3\1\63\6\3\1\27\3\0\2\3\4\0\5\3"+
    "\1\64\20\3\1\27\3\0\2\3\4\0\24\3\1\65"+
    "\1\3\1\27\3\0\2\3\4\0\7\3\1\66\16\3"+
    "\1\27\3\0\2\3\4\0\13\3\1\67\4\3\1\70"+
    "\5\3\1\27\3\0\2\3\4\0\17\3\1\71\6\3"+
    "\1\27\3\0\2\3\4\0\1\3\1\72\24\3\1\27"+
    "\3\0\2\3\4\0\3\3\1\73\22\3\1\27\3\0"+
    "\2\3\4\0\10\3\1\74\15\3\1\27\3\0\2\3"+
    "\4\0\7\3\1\75\16\3\1\27\4\0\1\52\33\0"+
    "\1\76\2\0\2\3\4\0\1\3\1\77\24\3\1\27"+
    "\3\0\2\3\4\0\11\3\1\100\14\3\1\27\3\0"+
    "\2\3\4\0\6\3\1\101\17\3\1\27\3\0\2\3"+
    "\4\0\12\3\1\102\13\3\1\27\3\0\2\3\4\0"+
    "\7\3\1\103\16\3\1\27\3\0\2\3\4\0\17\3"+
    "\1\104\6\3\1\27\3\0\2\3\4\0\1\3\1\105"+
    "\24\3\1\27\3\0\2\3\4\0\13\3\1\106\12\3"+
    "\1\27\3\0\2\3\4\0\7\3\1\107\16\3\1\27"+
    "\3\0\2\3\4\0\15\3\1\110\10\3\1\27\3\0"+
    "\2\3\4\0\2\3\1\111\23\3\1\27\3\0\2\3"+
    "\4\0\23\3\1\112\2\3\1\27\3\0\2\3\4\0"+
    "\7\3\1\113\16\3\1\27\3\0\2\3\4\0\13\3"+
    "\1\114\12\3\1\27\3\0\2\3\4\0\12\3\1\115"+
    "\13\3\1\27\3\0\2\3\4\0\15\3\1\116\10\3"+
    "\1\27\3\0\2\3\4\0\4\3\1\117\21\3\1\27"+
    "\3\0\2\3\4\0\17\3\1\120\6\3\1\27\3\0"+
    "\2\3\4\0\2\3\1\121\23\3\1\27\3\0\2\3"+
    "\4\0\3\3\1\122\1\3\1\123\10\3\1\124\1\3"+
    "\1\125\5\3\1\27\3\0\2\3\4\0\4\3\1\126"+
    "\21\3\1\27\3\0\2\3\4\0\17\3\1\127\6\3"+
    "\1\27\3\0\2\3\4\0\4\3\1\130\21\3\1\27"+
    "\3\0\2\3\4\0\12\3\1\131\13\3\1\27\3\0"+
    "\2\3\4\0\12\3\1\132\13\3\1\27\3\0\2\3"+
    "\4\0\1\3\1\133\24\3\1\27\3\0\2\3\4\0"+
    "\15\3\1\134\10\3\1\27\3\0\1\135\1\3\4\0"+
    "\26\135\1\27\3\0\2\3\4\0\15\3\1\136\10\3"+
    "\1\27\3\0\2\3\4\0\7\3\1\137\16\3\1\27"+
    "\3\0\2\3\4\0\13\3\1\140\12\3\1\27\3\0"+
    "\2\3\4\0\12\3\1\141\13\3\1\27\3\0\2\3"+
    "\4\0\4\3\1\142\2\3\1\143\16\3\1\27\3\0"+
    "\2\3\4\0\11\3\1\144\14\3\1\27\3\0\2\3"+
    "\4\0\4\3\1\145\21\3\1\27\3\0\2\3\4\0"+
    "\13\3\1\146\3\3\1\147\6\3\1\27\3\0\2\3"+
    "\4\0\1\3\1\150\24\3\1\27\3\0\2\3\4\0"+
    "\1\3\1\151\24\3\1\27\3\0\2\3\4\0\25\3"+
    "\1\152\1\27\3\0\2\3\4\0\15\3\1\153\10\3"+
    "\1\27\3\0\2\3\4\0\15\3\1\154\10\3\1\27"+
    "\3\0\2\3\4\0\17\3\1\155\6\3\1\27\3\0"+
    "\2\135\4\0\26\135\1\27\3\0\2\3\4\0\4\3"+
    "\1\156\21\3\1\27\3\0\2\3\4\0\14\3\1\157"+
    "\11\3\1\27\3\0\2\3\4\0\6\3\1\160\17\3"+
    "\1\27\3\0\2\3\4\0\1\3\1\161\24\3\1\27"+
    "\3\0\2\3\4\0\10\3\1\162\15\3\1\27\3\0"+
    "\2\3\4\0\2\3\1\163\23\3\1\27\3\0\2\3"+
    "\4\0\7\3\1\164\16\3\1\27\3\0\2\3\4\0"+
    "\17\3\1\165\6\3\1\27\3\0\2\3\4\0\1\3"+
    "\1\166\24\3\1\27\3\0\2\3\4\0\2\3\1\167"+
    "\23\3\1\27\3\0\2\3\4\0\4\3\1\170\21\3"+
    "\1\27\3\0\2\3\4\0\7\3\1\171\16\3\1\27"+
    "\3\0\2\3\4\0\1\3\1\172\24\3\1\27\3\0"+
    "\2\3\4\0\13\3\1\173\12\3\1\27\3\0\2\3"+
    "\4\0\17\3\1\174\6\3\1\27\3\0\2\3\4\0"+
    "\4\3\1\175\21\3\1\27\3\0\2\3\4\0\22\3"+
    "\1\176\3\3\1\27\3\0\2\3\4\0\11\3\1\177"+
    "\14\3\1\27\3\0\2\3\4\0\12\3\1\200\13\3"+
    "\1\27\3\0\2\3\4\0\2\3\1\201\23\3\1\27"+
    "\3\0\2\3\4\0\13\3\1\202\12\3\1\27\3\0"+
    "\2\3\4\0\12\3\1\203\13\3\1\27\3\0\2\3"+
    "\4\0\17\3\1\204\6\3\1\27\3\0\2\3\4\0"+
    "\17\3\1\205\6\3\1\27\3\0\2\3\4\0\3\3"+
    "\1\206\22\3\1\27\3\0\2\3\4\0\16\3\1\207"+
    "\7\3\1\27\3\0\2\3\4\0\11\3\1\210\14\3"+
    "\1\27\3\0\2\3\4\0\2\3\1\211\23\3\1\27"+
    "\3\0\2\3\4\0\4\3\1\212\21\3\1\27\3\0"+
    "\2\3\4\0\15\3\1\213\10\3\1\27\3\0\2\3"+
    "\4\0\7\3\1\214\16\3\1\27\3\0\2\3\4\0"+
    "\4\3\1\215\21\3\1\27\3\0\2\3\4\0\7\3"+
    "\1\216\16\3\1\27\3\0\2\3\4\0\1\3\1\217"+
    "\24\3\1\27\3\0\2\3\4\0\17\3\1\220\6\3"+
    "\1\27\3\0\2\3\4\0\14\3\1\221\11\3\1\27"+
    "\3\0\2\3\4\0\7\3\1\222\16\3\1\27\3\0"+
    "\2\3\4\0\2\3\1\223\23\3\1\27\3\0\2\3"+
    "\4\0\13\3\1\224\12\3\1\27\3\0\2\3\4\0"+
    "\4\3\1\225\21\3\1\27\3\0\2\3\4\0\2\3"+
    "\1\226\23\3\1\27\3\0\2\3\4\0\3\3\1\227"+
    "\22\3\1\27\3\0\2\3\4\0\16\3\1\230\7\3"+
    "\1\27\3\0\2\3\4\0\15\3\1\231\10\3\1\27"+
    "\3\0\2\3\4\0\4\3\1\232\21\3\1\27\3\0"+
    "\2\3\4\0\1\3\1\233\24\3\1\27\3\0\2\3"+
    "\4\0\7\3\1\234\16\3\1\27\3\0\2\3\4\0"+
    "\2\3\1\235\23\3\1\27\3\0\2\3\4\0\15\3"+
    "\1\236\10\3\1\27\3\0\2\3\4\0\1\3\1\237"+
    "\24\3\1\27\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\17\1\2\0\21\1\1\0"+
    "\23\1\1\11\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { lexeme=yytext(); return fin_procedimiento;
          }
        case 36: break;
        case 12: 
          { lexeme=yytext(); return identificador_arreglo;
          }
        case 37: break;
        case 22: 
          { lexeme=yytext(); return logico;
          }
        case 38: break;
        case 28: 
          { lexeme=yytext(); return caracter;
          }
        case 39: break;
        case 26: 
          { lexeme=yytext(); return fin_para;
          }
        case 40: break;
        case 15: 
          { lexeme=yytext(); return real;
          }
        case 41: break;
        case 34: 
          { lexeme=yytext(); return procedimiento;
          }
        case 42: break;
        case 29: 
          { lexeme=yytext(); return mientras;
          }
        case 43: break;
        case 14: 
          { lexeme=yytext(); return caso;
          }
        case 44: break;
        case 1: 
          { lexeme=yytext(); return error;
          }
        case 45: break;
        case 30: 
          { lexeme=yytext(); return fin_segun;
          }
        case 46: break;
        case 4: 
          { lexeme=yytext(); return signo;
          }
        case 47: break;
        case 18: 
          { lexeme=yytext(); return segun;
          }
        case 48: break;
        case 24: 
          { lexeme=yytext(); return defecto;
          }
        case 49: break;
        case 10: 
          { lexeme=yytext(); return opNo;
          }
        case 50: break;
        case 5: 
          { lexeme=yytext(); return delimitador;
          }
        case 51: break;
        case 9: 
          { lexeme=yytext(); return opO;
          }
        case 52: break;
        case 6: 
          { lexeme=yytext(); return agrupacion;
          }
        case 53: break;
        case 13: 
          { lexeme=yytext(); return sino;
          }
        case 54: break;
        case 3: 
          { lexeme=yytext(); return numero;
          }
        case 55: break;
        case 21: 
          { lexeme=yytext(); return entero;
          }
        case 56: break;
        case 32: 
          { lexeme=yytext(); return fin_funcion;
          }
        case 57: break;
        case 25: 
          { lexeme=yytext(); return repetir;
          }
        case 58: break;
        case 17: 
          { lexeme=yytext(); return leer;
          }
        case 59: break;
        case 33: 
          { lexeme=yytext(); return fin_mientras;
          }
        case 60: break;
        case 11: 
          { lexeme=yytext(); return si;
          }
        case 61: break;
        case 20: 
          { lexeme=yytext(); return fin_si;
          }
        case 62: break;
        case 19: 
          { lexeme=yytext(); return texto;
          }
        case 63: break;
        case 2: 
          { lexeme=yytext(); return identificador;
          }
        case 64: break;
        case 31: 
          { lexeme=yytext(); return hasta_que;
          }
        case 65: break;
        case 8: 
          { lexeme=yytext(); return opY;
          }
        case 66: break;
        case 7: 
          { /* Ignorar espacios en blanco */
          }
        case 67: break;
        case 27: 
          { lexeme=yytext(); return escribir;
          }
        case 68: break;
        case 16: 
          { lexeme=yytext(); return para;
          }
        case 69: break;
        case 23: 
          { lexeme=yytext(); return funcion;
          }
        case 70: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
