/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package codigo;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import static java.lang.ProcessBuilder.Redirect.to;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author jeffr
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    NumeroLinea numeroLinea;
    DefaultTableModel modelo;
    public FrmPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        //pasomos como parametro jtpCOdigo para que se agregen los numeros de linea
        numeroLinea = new NumeroLinea(jtpCodigo);
        jScrollPane2.setRowHeaderView(numeroLinea);
        //tabla
        modelo = new DefaultTableModel();
        modelo.addColumn("Lexema");
        modelo.addColumn("Token");
     //   modelo.addColumn("Ubicacion");
        modelo.addColumn("Tabla De Simbolos");
        this.tabla.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnAnalizar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpCodigo = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAnalizarSin = new javax.swing.JTextArea();
        btnAbrirSin = new javax.swing.JButton();
        btnAnalizarSin = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 255));

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));

        btnAnalizar.setBackground(new java.awt.Color(153, 153, 153));
        btnAnalizar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAnalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/tocar.png"))); // NOI18N
        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        btnLimpiar.setBackground(new java.awt.Color(153, 153, 153));
        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/escoba.png"))); // NOI18N
        btnLimpiar.setBorderPainted(false);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jtpCodigo);

        tabla.setBackground(new java.awt.Color(0, 255, 255));
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabla);

        jTable1.setBackground(new java.awt.Color(0, 204, 204));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Reservadas", "100"},
                {"Identificador", "200"},
                {"Numero", "300"},
                {"OpAritmetico", "400"},
                {"OpLogico", "500"},
                {"OpAsignacion", "600"},
                {"OpComparacion", "700"},
                {"Agrupacionn", "800"},
                {"SignoPuntuacion", "900"},
                {"Comillas", "1000"},
                {"Cadena", "1100"}
            },
            new String [] {
                "GRUPOS", "GRUPOS"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        btnBuscar.setBackground(new java.awt.Color(153, 153, 153));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/lupa.png"))); // NOI18N
        btnBuscar.setBorderPainted(false);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnGuardar.setBackground(new java.awt.Color(153, 153, 153));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ahorrar.png"))); // NOI18N
        btnGuardar.setBorderPainted(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ANALISIS LEXICO");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAnalizar)
                        .addGap(59, 59, 59)
                        .addComponent(btnLimpiar)
                        .addGap(39, 39, 39)
                        .addComponent(btnBuscar)
                        .addGap(59, 59, 59)
                        .addComponent(btnGuardar)
                        .addGap(80, 80, 80)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3)))
        );

        jPanel2.setBackground(new java.awt.Color(0, 51, 255));

        txtAnalizarSin.setColumns(20);
        txtAnalizarSin.setRows(5);
        jScrollPane1.setViewportView(txtAnalizarSin);

        btnAbrirSin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/lupa.png"))); // NOI18N
        btnAbrirSin.setText("Abrir ");
        btnAbrirSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirSinActionPerformed(evt);
            }
        });

        btnAnalizarSin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/tocar.png"))); // NOI18N
        btnAnalizarSin.setText("Analizador Sintactico");
        btnAnalizarSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarSinActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ANALISIS SINTACTICO");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(btnAbrirSin)
                .addGap(51, 51, 51)
                .addComponent(btnAnalizarSin, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAnalizarSin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAbrirSin, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String []info = new String[3];
        int contRes=0, contIde=0 ,contNum=0,contOpa=0,contOpl=0,contOpas=0,contOpc=0,contAgr=0,contSig=0,contCom=0,contCad=0;
        // buscar un archivo:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);

        try {
            //Se empieza a utlizar el analizador lexico
            Reader lector = new BufferedReader(new FileReader(chooser.getSelectedFile()));
            Lexer lexer = new Lexer(lector);
            String resultado = "";
            while(true){
                Tokens tokens = lexer.yylex();
                if(tokens == null) {
                    resultado += "--FIN--";
                    //txtResultado.setText(resultado);
                    info[0] = "FIN";
                    info[1] = "FIN";
                //    info[2] = "FIN";
                    info[2] = "FIN";
                    modelo.addRow(info);
                    return;
                }
                switch(tokens){
                    case ERROR:
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ERROR]";
                    info[2] = "ERROR";
                    modelo.addRow(info);
                    break;
                    
                    case Si: case Sino: case Fin_Si: case Segun: case Caso: case Defecto: case Entonces:
                    case Fin_Segun: case Mientras: case  Fin_Mientras: case Repetir:
                    case Hasta: case Hasta_Que: case Para: case Fin_Para: case Hacer: case Con_Paso:
                    case T_Dato: case Leer: case Escribir: case Funcion: case Fin_Funcion:
                    case Procedimiento: case Fin_Procedimiento: case Algoritmo: case Fin_Algoritmo: case Op_Booleano:
                    // resultado += lexer.lexeme + " Es :  " + tokens +"\n";
                    contRes++;
                    int res=contRes+100;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[100 , "+Integer.toString(res)+"]";
                    modelo.addRow(info);
                    break;

                    case Identificador:
                    contIde++;
                    int ide=contIde+200;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[200 , "+Integer.toString(ide)+"]";
                    modelo.addRow(info);
                    break;

                    case Numero:
                    contNum++;
                    int num=contNum+300;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[300 , "+Integer.toString(num)+"]";
                    modelo.addRow(info);
                    break;

                    case Suma: case Resta: case Multiplicacion: case Division:
                    contOpa++;
                    int opa=contOpa+400;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //  info[2] = "[ , ]";
                    info[2] = "[400 , "+Integer.toString(opa)+"]";
                    modelo.addRow(info);
                    break;

                    case Op_Logico:
                    contOpl++;
                    int opl=contOpl+500;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[500 , "+Integer.toString(opl)+"]";
                    modelo.addRow(info);
                    break;

                    case Op_Asignacion:
                    contOpas++;
                    int opas=contOpas+600;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[600 , "+Integer.toString(opas)+"]";
                    modelo.addRow(info);
                    break;

                    case Op_Comparacion:
                    contOpc++;
                    int opc=contOpc+700;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[700 , "+Integer.toString(opc)+"]";
                    modelo.addRow(info);
                    break;

                    case Parentesis_a: case Parentesis_c: case Llave_a: case Llave_c:
                    case Corchete_a: case Corchete_c:
                    contAgr++;
                    int agr=contAgr+800;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[800 , "+Integer.toString(agr)+"]";
                    modelo.addRow(info);
                    break;

                    case P_Coma: case Punto: case Coma: case Puntos:
                    contSig++;
                    int sig=contSig+900;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[900 , "+Integer.toString(sig)+"]";
                    modelo.addRow(info);
                    break;

                    case Comillas:
                    contCom++;
                    int com=contCom+1000;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[1000 , "+Integer.toString(com)+"]";
                    modelo.addRow(info);
                    break;

                    case Cadena:
                    contCad++;
                    int cad=contCad+1100;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                 //   info[2] = "[ , ]";
                    info[2] = "[1100 , "+Integer.toString(cad)+"]";
                    modelo.addRow(info);
                    break;

                    default:
                    //   resultado += lexer.lexeme + " ES : " + tokens + "\n";
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                 //   info[2] = "[ , ]";
                    info[2]= "Default switch";
                    modelo.addRow(info);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Guardar un documento:
        File archivo = new File("CodigoGuardado.txt");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(jtpCodigo.getText());
            escribir.close();
            JOptionPane.showMessageDialog(null, "EL ARCHIVO SE GUARDO COMO: CodigoGuardado.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        Limpiar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // Limpiar o borrar
        Limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // TODO add your handling code here:
        //crear un documento de texto para luego analizar
        //analizar el texto del jtpCodigo
        String []info = new String[3];
        int contRes=0, contIde=0 ,contNum=0,contOpa=0,contOpl=0,contOpas=0,contOpc=0,contAgr=0,contSig=0,contCom=0,contCad=0;
        File archivo = new File("Codigo.txt");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(jtpCodigo.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //analizando o leyendo eljtpCodigo
        try {
            //Se empieza a utlizar el analizador lexico
            Reader lector = new BufferedReader(new FileReader("Codigo.txt"));
            Lexer lexer = new Lexer(lector);
            String resultado = "";
            while(true){
                Tokens tokens = lexer.yylex();
                if(tokens == null) {
                    resultado += "--FIN--";
                    //txtResultado.setText(resultado);
                    info[0] = "FIN";
                    info[1] = "FIN";
                    info[2] = "FIN";
                //    info[3] = "FIN";
                    modelo.addRow(info);
                    return;
                }
                switch(tokens){
                    case ERROR:
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ERROR]";
                    info[2] = "ERROR";
                    modelo.addRow(info);
                    break;

                    case Si: case Sino: case Fin_Si: case Segun: case Caso: case Defecto: case Entonces:
                    case Fin_Segun: case Mientras: case  Fin_Mientras: case Repetir:
                    case Hasta: case Hasta_Que: case Para: case Fin_Para: case Hacer: case Con_Paso:
                    case T_Dato: case Leer: case Escribir: case Funcion: case Fin_Funcion:
                    case Procedimiento: case Fin_Procedimiento: case Algoritmo: case Fin_Algoritmo: case Op_Booleano:
                    // resultado += lexer.lexeme + " Es :  " + tokens +"\n";
                    contRes++;
                    int res=contRes+100;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[100 , "+Integer.toString(res)+"]";
                    modelo.addRow(info);
                    break;

                    case Identificador:
                    contIde++;
                    int ide=contIde+200;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[200 , "+Integer.toString(ide)+"]";
                    modelo.addRow(info);
                    break;

                    case Numero:
                    contNum++;
                    int num=contNum+300;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[300 , "+Integer.toString(num)+"]";
                    modelo.addRow(info);
                    break;

                    case Suma: case Resta: case Multiplicacion: case Division:
                    contOpa++;
                    int opa=contOpa+400;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //  info[2] = "[ , ]";
                    info[2] = "[400 , "+Integer.toString(opa)+"]";
                    modelo.addRow(info);
                    break;

                    case Op_Logico:
                    contOpl++;
                    int opl=contOpl+500;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[500 , "+Integer.toString(opl)+"]";
                    modelo.addRow(info);
                    break;

                    case Op_Asignacion:
                    contOpas++;
                    int opas=contOpas+600;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[600 , "+Integer.toString(opas)+"]";
                    modelo.addRow(info);
                    break;

                    case Op_Comparacion:
                    contOpc++;
                    int opc=contOpc+700;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[700 , "+Integer.toString(opc)+"]";
                    modelo.addRow(info);
                    break;

                    case Parentesis_a: case Parentesis_c: case Llave_a: case Llave_c:
                    case Corchete_a: case Corchete_c:
                    contAgr++;
                    int agr=contAgr+800;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[800 , "+Integer.toString(agr)+"]";
                    modelo.addRow(info);
                    break;

                    case P_Coma: case Punto: case Coma: case Puntos:
                    contSig++;
                    int sig=contSig+900;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[900 , "+Integer.toString(sig)+"]";
                    modelo.addRow(info);
                    break;

                    case Comillas:
                    contCom++;
                    int com=contCom+1000;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[1000 , "+Integer.toString(com)+"]";
                    modelo.addRow(info);
                    break;

                    case Cadena:
                    contCad++;
                    int cad=contCad+1100;
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2] = "[1100 , "+Integer.toString(cad)+"]";
                    modelo.addRow(info);
                    break;

                    default:
                    //   resultado += lexer.lexeme + " ES : " + tokens + "\n";
                    info[0] = lexer.lexeme;
                    info[1] = tokens.toString();
                //    info[2] = "[ , ]";
                    info[2]= "Default switch";
                    modelo.addRow(info);
                }

            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnAbrirSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirSinActionPerformed
          // TODO add your handling code here:
      textoEnPantalla();
    }//GEN-LAST:event_btnAbrirSinActionPerformed

    private void btnAnalizarSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarSinActionPerformed
        // TODO add your handling code here:
            String ST = jtpCodigo.getText();
        Sintax s = new Sintax(new codigo.LexerCup(new StringReader(ST)));
        
        try {
            s.parse();
            txtAnalizarSin.setText("Analisis realizado correctamente");
            txtAnalizarSin.setForeground(new Color(25, 111, 61));
        } catch (Exception ex) {
            Symbol sym = s.getS();
            txtAnalizarSin.setText("Error de sintaxis. Linea: " + (sym.right + 1) + " NO.Caracter: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            txtAnalizarSin.setForeground(Color.red);
        }
    }//GEN-LAST:event_btnAnalizarSinActionPerformed

    public void textoEnPantalla(){ 
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
        
        try {
            String ST = new String(Files.readAllBytes(archivo.toPath()));
            jtpCodigo.setText(ST);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void Limpiar(){
      //  txtResultado.setText("");
        jtpCodigo.setText("");
        modelo.getDataVector().removeAllElements();
        tabla.updateUI();
        txtAnalizarSin.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirSin;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnAnalizarSin;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jtpCodigo;
    private javax.swing.JTable tabla;
    private javax.swing.JTextArea txtAnalizarSin;
    // End of variables declaration//GEN-END:variables
}
