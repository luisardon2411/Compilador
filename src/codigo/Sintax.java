
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 23 12:17:30 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 23 12:17:30 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\005\006\000\002\005\011\000" +
    "\002\005\014\000\002\006\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\007\010\000\002\007\015" +
    "\000\002\007\023\000\002\010\007\000\002\011\006\000" +
    "\002\012\012\000\002\012\011\000\002\012\011\000\002" +
    "\014\014\000\002\013\006\000\002\013\012\000\002\013" +
    "\016\000\002\013\022\000\002\013\026\000\002\015\014" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\033\005\001\002\000\004\002\260\001" +
    "\002\000\004\060\006\001\002\000\026\004\007\007\027" +
    "\013\014\015\023\020\015\024\025\025\011\026\022\034" +
    "\020\060\016\001\002\000\010\050\115\060\116\061\113" +
    "\001\002\000\036\004\ufff3\005\ufff3\006\ufff3\007\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\034\ufff3\060\ufff3\001\002\000\006\060\213\063" +
    "\214\001\002\000\036\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\034\ufffd\060\ufffd\001\002\000\026\004\007" +
    "\007\027\013\014\015\023\020\015\024\025\025\011\026" +
    "\022\034\212\060\016\001\002\000\010\050\115\060\116" +
    "\061\113\001\002\000\006\024\161\060\162\001\002\000" +
    "\004\043\142\001\002\000\036\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\034\ufff5\060\ufff5\001\002\000\004" +
    "\002\uffff\001\002\000\036\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\020\ufff9\021\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\034\ufff9\060\ufff9\001\002\000\006\060" +
    "\131\063\132\001\002\000\004\053\077\001\002\000\036" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\020\ufffb\021\ufffb\024\ufffb\025\ufffb\026\ufffb\034\ufffb" +
    "\060\ufffb\001\002\000\004\060\066\001\002\000\036\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\020\ufff1\021\ufff1\024\ufff1\025\ufff1\026\ufff1\034\ufff1\060" +
    "\ufff1\001\002\000\004\051\031\001\002\000\036\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\013\ufff7\014\ufff7\015\ufff7\020" +
    "\ufff7\021\ufff7\024\ufff7\025\ufff7\026\ufff7\034\ufff7\060\ufff7" +
    "\001\002\000\004\060\032\001\002\000\004\052\033\001" +
    "\002\000\004\022\034\001\002\000\004\010\036\001\002" +
    "\000\004\011\062\001\002\000\004\061\037\001\002\000" +
    "\004\047\040\001\002\000\012\024\025\025\011\026\022" +
    "\060\016\001\002\000\006\010\042\011\uffcd\001\002\000" +
    "\004\061\043\001\002\000\004\047\044\001\002\000\012" +
    "\024\025\025\011\026\022\060\016\001\002\000\006\010" +
    "\046\011\uffcc\001\002\000\004\061\047\001\002\000\004" +
    "\047\050\001\002\000\012\024\025\025\011\026\022\060" +
    "\016\001\002\000\006\010\052\011\uffcb\001\002\000\004" +
    "\061\053\001\002\000\004\047\054\001\002\000\012\024" +
    "\025\025\011\026\022\060\016\001\002\000\006\010\056" +
    "\011\uffca\001\002\000\004\061\057\001\002\000\004\047" +
    "\060\001\002\000\012\024\025\025\011\026\022\060\016" +
    "\001\002\000\004\011\uffc9\001\002\000\004\026\063\001" +
    "\002\000\004\063\064\001\002\000\004\012\065\001\002" +
    "\000\036\004\uffce\005\uffce\006\uffce\007\uffce\013\uffce\014" +
    "\uffce\015\uffce\020\uffce\021\uffce\024\uffce\025\uffce\026\uffce" +
    "\034\uffce\060\uffce\001\002\000\006\043\070\044\067\001" +
    "\002\000\044\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\013\ufff0\014\ufff0\015\ufff0\020\ufff0\021\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\034\ufff0\054\ufff0\060\ufff0\001\002" +
    "\000\010\050\072\061\071\063\073\001\002\000\004\044" +
    "\076\001\002\000\004\044\075\001\002\000\004\044\074" +
    "\001\002\000\044\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\013\uffee\014\uffee\015\uffee\020\uffee\021\uffee" +
    "\024\uffee\025\uffee\026\uffee\034\uffee\054\uffee\060\uffee\001" +
    "\002\000\044\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed\024" +
    "\uffed\025\uffed\026\uffed\034\uffed\054\uffed\060\uffed\001\002" +
    "\000\044\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\013\uffef\014\uffef\015\uffef\020\uffef\021\uffef\024\uffef" +
    "\025\uffef\026\uffef\034\uffef\054\uffef\060\uffef\001\002\000" +
    "\024\004\007\007\027\013\014\015\023\020\015\024\025" +
    "\025\011\026\022\060\016\001\002\000\024\004\007\007" +
    "\027\013\014\015\023\020\015\024\025\025\011\026\022" +
    "\060\016\001\002\000\036\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\021\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\034\ufff4\060\ufff4\001\002\000\026\004" +
    "\ufffe\007\ufffe\013\ufffe\015\ufffe\020\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\054\110\060\ufffe\001\002\000\036\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\013\ufffa\014\ufffa\015\ufffa\020\ufffa" +
    "\021\ufffa\024\ufffa\025\ufffa\026\ufffa\034\ufffa\060\ufffa\001" +
    "\002\000\036\004\ufff8\005\ufff8\006\ufff8\007\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\020\ufff8\021\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\034\ufff8\060\ufff8\001\002\000\036\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2\021" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\034\ufff2\060\ufff2\001\002" +
    "\000\036\004\ufff6\005\ufff6\006\ufff6\007\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\020\ufff6\021\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\034\ufff6\060\ufff6\001\002\000\036\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\013\ufffc\014\ufffc\015\ufffc\020\ufffc\021\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\034\ufffc\060\ufffc\001\002\000" +
    "\004\017\111\001\002\000\004\051\112\001\002\000\010" +
    "\050\115\060\116\061\113\001\002\000\004\042\126\001" +
    "\002\000\004\052\124\001\002\000\034\004\uffdd\007\uffdd" +
    "\013\uffdd\015\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\052\uffdd\057\uffdd\060\uffdd\001\002\000\004" +
    "\042\117\001\002\000\012\050\121\060\122\061\120\063" +
    "\123\001\002\000\034\004\uffdb\007\uffdb\013\uffdb\015\uffdb" +
    "\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\052" +
    "\uffdb\057\uffdb\060\uffdb\001\002\000\034\004\uffdc\007\uffdc" +
    "\013\uffdc\015\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\052\uffdc\057\uffdc\060\uffdc\001\002\000\034" +
    "\004\uffd8\007\uffd8\013\uffd8\015\uffd8\020\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\052\uffd8\057\uffd8\060\uffd8" +
    "\001\002\000\034\004\uffd7\007\uffd7\013\uffd7\015\uffd7\020" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\052\uffd7" +
    "\057\uffd7\060\uffd7\001\002\000\004\044\125\001\002\000" +
    "\036\004\uffc8\005\uffc8\006\uffc8\007\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\020\uffc8\021\uffc8\024\uffc8\025\uffc8\026\uffc8\034" +
    "\uffc8\060\uffc8\001\002\000\006\060\130\061\127\001\002" +
    "\000\034\004\uffd9\007\uffd9\013\uffd9\015\uffd9\020\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\052\uffd9\057\uffd9" +
    "\060\uffd9\001\002\000\034\004\uffda\007\uffda\013\uffda\015" +
    "\uffda\020\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\052\uffda\057\uffda\060\uffda\001\002\000\006\043\135\044" +
    "\134\001\002\000\004\044\133\001\002\000\044\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014" +
    "\uffea\015\uffea\020\uffea\021\uffea\024\uffea\025\uffea\026\uffea" +
    "\034\uffea\054\uffea\060\uffea\001\002\000\044\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec" +
    "\015\uffec\020\uffec\021\uffec\024\uffec\025\uffec\026\uffec\034" +
    "\uffec\054\uffec\060\uffec\001\002\000\006\061\136\063\137" +
    "\001\002\000\004\044\141\001\002\000\004\044\140\001" +
    "\002\000\044\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\013\uffe6\014\uffe6\015\uffe6\020\uffe6\021\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\034\uffe6\054\uffe6\060\uffe6\001\002" +
    "\000\044\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\020\uffe8\021\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\034\uffe8\054\uffe8\060\uffe8\001\002\000" +
    "\004\060\143\001\002\000\012\035\146\036\145\037\147" +
    "\040\144\001\002\000\004\061\156\001\002\000\004\061" +
    "\154\001\002\000\004\061\152\001\002\000\004\061\150" +
    "\001\002\000\004\044\151\001\002\000\044\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\020\uffe2\021\uffe2\024\uffe2\025\uffe2\026\uffe2\034" +
    "\uffe2\054\uffe2\060\uffe2\001\002\000\004\044\153\001\002" +
    "\000\044\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\020\uffe4\021\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\034\uffe4\054\uffe4\060\uffe4\001\002\000" +
    "\004\044\155\001\002\000\044\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\020" +
    "\uffe3\021\uffe3\024\uffe3\025\uffe3\026\uffe3\034\uffe3\054\uffe3" +
    "\060\uffe3\001\002\000\004\044\157\001\002\000\044\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\020\uffe1\021\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\034\uffe1\054\uffe1\060\uffe1\001\002\000\024\004\007" +
    "\007\027\013\014\015\023\020\015\024\025\025\011\026" +
    "\022\060\016\001\002\000\004\060\174\001\002\000\004" +
    "\043\163\001\002\000\004\061\164\001\002\000\004\016" +
    "\165\001\002\000\010\050\115\060\116\061\166\001\002" +
    "\000\006\023\172\042\126\001\002\000\004\023\170\001" +
    "\002\000\004\061\171\001\002\000\024\004\uffcf\007\uffcf" +
    "\013\uffcf\015\uffcf\020\uffcf\024\uffcf\025\uffcf\026\uffcf\060" +
    "\uffcf\001\002\000\004\061\173\001\002\000\024\004\uffd0" +
    "\007\uffd0\013\uffd0\015\uffd0\020\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\060\uffd0\001\002\000\004\043\175\001\002\000\004" +
    "\061\176\001\002\000\004\016\177\001\002\000\004\061" +
    "\200\001\002\000\004\023\201\001\002\000\004\061\202" +
    "\001\002\000\024\004\uffd1\007\uffd1\013\uffd1\015\uffd1\020" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\060\uffd1\001\002\000\026" +
    "\004\007\007\027\013\014\015\023\020\015\021\204\024" +
    "\025\025\011\026\022\060\016\001\002\000\036\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\013\uffd2\014\uffd2\015\uffd2\020" +
    "\uffd2\021\uffd2\024\uffd2\025\uffd2\026\uffd2\034\uffd2\060\uffd2" +
    "\001\002\000\036\004\ufffe\005\ufffe\006\ufffe\007\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\020\ufffe\021\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\034\ufffe\060\ufffe\001\002\000\004\022\207\001" +
    "\002\000\024\004\007\007\027\013\014\015\023\020\015" +
    "\024\025\025\011\026\022\060\016\001\002\000\026\004" +
    "\007\007\027\013\014\014\211\015\023\020\015\024\025" +
    "\025\011\026\022\060\016\001\002\000\036\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\013\uffd3\014\uffd3\015\uffd3\020\uffd3" +
    "\021\uffd3\024\uffd3\025\uffd3\026\uffd3\034\uffd3\060\uffd3\001" +
    "\002\000\004\002\000\001\002\000\006\043\217\044\216" +
    "\001\002\000\004\044\215\001\002\000\044\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\020\uffe9\021\uffe9\024\uffe9\025\uffe9\026\uffe9\034" +
    "\uffe9\054\uffe9\060\uffe9\001\002\000\044\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\020\uffeb\021\uffeb\024\uffeb\025\uffeb\026\uffeb\034\uffeb" +
    "\054\uffeb\060\uffeb\001\002\000\006\061\220\063\221\001" +
    "\002\000\004\044\223\001\002\000\004\044\222\001\002" +
    "\000\044\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\020\uffe5\021\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\034\uffe5\054\uffe5\060\uffe5\001\002\000" +
    "\044\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\020\uffe7\021\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\034\uffe7\054\uffe7\060\uffe7\001\002\000\026" +
    "\004\007\007\027\013\014\015\023\020\015\024\025\025" +
    "\011\026\022\057\226\060\016\001\002\000\030\004\007" +
    "\005\254\006\255\007\027\013\014\015\023\020\015\024" +
    "\025\025\011\026\022\060\016\001\002\000\004\026\227" +
    "\001\002\000\004\063\230\001\002\000\004\044\231\001" +
    "\002\000\010\005\232\006\234\025\233\001\002\000\004" +
    "\026\250\001\002\000\004\060\235\001\002\000\036\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\020\uffdf\021\uffdf\024\uffdf\025\uffdf\026\uffdf\034\uffdf\060" +
    "\uffdf\001\002\000\004\044\236\001\002\000\006\005\237" +
    "\006\240\001\002\000\004\026\241\001\002\000\036\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\013\uffde\014\uffde\015\uffde" +
    "\020\uffde\021\uffde\024\uffde\025\uffde\026\uffde\034\uffde\060" +
    "\uffde\001\002\000\004\063\242\001\002\000\004\044\243" +
    "\001\002\000\004\025\244\001\002\000\004\060\245\001" +
    "\002\000\004\044\246\001\002\000\004\006\247\001\002" +
    "\000\036\004\uffd4\005\uffd4\006\uffd4\007\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\020\uffd4\021\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\034\uffd4\060\uffd4\001\002\000\004\063\251\001\002\000" +
    "\004\044\252\001\002\000\004\006\253\001\002\000\036" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\020\uffd5\021\uffd5\024\uffd5\025\uffd5\026\uffd5\034\uffd5" +
    "\060\uffd5\001\002\000\024\004\007\007\027\013\014\015" +
    "\023\020\015\024\025\025\011\026\022\060\016\001\002" +
    "\000\036\004\uffe0\005\uffe0\006\uffe0\007\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\034\uffe0\060\uffe0\001\002\000\026\004\007\006\257\007" +
    "\027\013\014\015\023\020\015\024\025\025\011\026\022" +
    "\060\016\001\002\000\036\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\020\uffd6\021\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\034\uffd6\060\uffd6\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\012\004\011\005\023\007\020" +
    "\010\027\011\016\014\007\015\025\001\001\000\004\006" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\204\005\106\007\102\010\103\011" +
    "\105\014\100\015\104\001\001\000\004\006\205\001\001" +
    "\000\004\012\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\077\004\011\005" +
    "\023\007\020\010\027\011\016\014\007\015\025\001\001" +
    "\000\020\004\101\005\106\007\102\010\103\011\105\014" +
    "\100\015\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\202\004\011\005\023\007\020\010\027\011" +
    "\016\014\007\015\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\204\005\106\007\102\010\103" +
    "\011\105\014\100\015\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\207\004\011" +
    "\005\023\007\020\010\027\011\016\014\007\015\025\001" +
    "\001\000\020\004\204\005\106\007\102\010\103\011\105" +
    "\014\100\015\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\224\004\011\005\023\007\020\010\027\011\016\014" +
    "\007\015\025\001\001\000\020\004\204\005\106\007\102" +
    "\010\103\011\105\014\100\015\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\255\004\011" +
    "\005\023\007\020\010\027\011\016\014\007\015\025\001" +
    "\001\000\002\001\001\000\020\004\204\005\106\007\102" +
    "\010\103\011\105\014\100\015\104\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // REPETIR ::= Repetir Llave_a SENTENCIA DECLARACION Llave_c Hasta_Que Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_SEGUN ::= Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SEGUN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-19)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_SEGUN ::= Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SEGUN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_SEGUN ::= Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SEGUN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_SEGUN ::= Caso Numero Puntos DECLARACION Caso Numero Puntos DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SEGUN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_SEGUN ::= Caso Numero Puntos DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SEGUN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SEGUN ::= Segun Parentesis_a Identificador Parentesis_c Hacer SENTENCIA_SEGUN Defecto Escribir Cadena Fin_Segun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGUN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_PARA ::= Identificador Op_Asignacion Numero Hasta SENTENCIA_BOOLEANA Con_Paso Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_PARA ::= Identificador Op_Asignacion Numero Hasta Numero Con_Paso Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_PARA ::= T_Dato Identificador Op_Asignacion Numero Hasta Numero Con_Paso Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARA ::= Para SENTENCIA_PARA SENTENCIA Fin_Para 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MIENTRAS ::= Mientras SENTENCIA_BOOLEANA Hacer SENTENCIA Fin_Mientras 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SINO ::= Si SENTENCIA_BOOLEANA Entonces Escribir Cadena P_Coma Leer Identificador P_Coma Sino Escribir Cadena P_Coma Leer Identificador P_Coma Fin_Si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SINO ::= Si SENTENCIA_BOOLEANA Entonces Escribir Cadena P_Coma Sino Escribir Cadena P_Coma Fin_Si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SINO ::= Si SENTENCIA_BOOLEANA SENTENCIA Sino SENTENCIA Fin_Si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_Comparacion Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_Comparacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Numero Op_Comparacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Numero Op_Comparacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_Comparacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_Comparacion Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SI ::= Si SENTENCIA_BOOLEANA Entonces Escribir Cadena P_Coma Leer Identificador P_Coma Fin_Si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SI ::= Si SENTENCIA_BOOLEANA Entonces Escribir Cadena P_Coma Fin_Si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SI ::= Si SENTENCIA_BOOLEANA SENTENCIA Fin_Si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Identificador Op_Asignacion Identificador Division Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Identificador Op_Asignacion Identificador Multiplicacion Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Identificador Op_Asignacion Identificador Resta Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Identificador Op_Asignacion Identificador Suma Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Leer Identificador Op_Asignacion Cadena P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Escribir Identificador Op_Asignacion Cadena P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Leer Identificador Op_Asignacion Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Escribir Identificador Op_Asignacion Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Leer Cadena P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Escribir Cadena P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Leer Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Escribir Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= T_Dato Identificador Op_Asignacion Op_Booleano P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= T_Dato Identificador Op_Asignacion Cadena P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= T_Dato Identificador Op_Asignacion Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= T_Dato Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SEGUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA SEGUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Algoritmo Identificador Fin_Algoritmo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Algoritmo Identificador SENTENCIA Fin_Algoritmo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

